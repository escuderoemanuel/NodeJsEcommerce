paths:

  #? Endpoint (all products)
  /products/:

    # Get method
    get:
      summary: Get all existing products from the database
      security:
        - bearerAuth: []
      tags:
        - Products
      responses:
        '200':
          description: All products were correctly obtained from the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error

    # Post method
    post:
      summary: Create a new product and save it in the database
      security:
        - bearerAuth: []
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product was correctly created in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request, product was not created
        '500':
          description: Internal server error

  #? Endpoint (product by id)
  /products/{pid}:

    # Get method
    get:
      summary: Get one existing product by ID from the database
      security:
        - bearerAuth: []
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: Product ID to search for
          schema:
            type: string
            example: "65ffd0289713b7d3858134f4"
      responses:
        '200':
          description: Product was correctly obtained from the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product was not found in the database
        '500':
          description: Internal server error

    # Put method
    put:
      summary: Update an existing product in the database
      security:
        - bearerAuth: []
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: Product ID to update
          schema:
            type: string
            example: "65ffd0289713b7d3858134f4"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/UpdateProduct'
      responses:
        '200':
          description: Product was correctly updated in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product was not found in the database
        '500':
          description: Internal server error

    # Delete method
    delete:
      summary: Delete an existing product in the database
      security:
        - bearerAuth: []
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: Product ID to delete
          schema:
            type: string
            example: "65ffd0289713b7d3858134f4"
      responses:
        '200':
          description: Product was correctly deleted from the database
        '404':
          description: Product was not found in the database
        '500':
          description: Internal server error

#? Components
components:

  #? Security
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  #? Schemas
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB autogenerated ID
        title:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        thumbnails:
          type: array
          items:
            type: string
          description: Product images
        code:
          type: string
          description: Product code (unique)
        stock:
          type: number
          description: Product stock
        category:
          type: string
          description: Product category
        status:
          type: boolean
          description: Product status (active/inactive)
        owner:
          type: string
          description: Product owner
      example:
        _id: "65ffd0289713b7d3858134f4"
        title: "Product 1"
        description: "Product 1 description"
        price: 100
        thumbnails: ["image1.jpg", "image2.jpg"]
        code: "P001"
        stock: 10
        category: "Category 1"
        status: true
        owner: "628d0f7e8d9f8d8d8d8d8d8"

  #? Request bodies
  requestBodies:
    UpdateProduct:
      description: Product object that needs to be updated
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: Product name
              description:
                type: string
                description: Product description
              price:
                type: number
                description: Product price
              thumbnails:
                type: array
                items:
                  type: string
                description: Product images
              code:
                type: string
                description: Product code (unique)
              stock:
                type: number
                description: Product stock
              category:
                type: string
                description: Product category
              status:
                type: boolean
                description: Product status
              owner:
                type: string
                description: Product owner
            example:
              title: "Product 1"
              description: "Product 1 description"
              price: 100
              thumbnails: ["image1.jpg", "image2.jpg"]
              code: "P001"
              stock: 10
              category: "Category 1"
              status: true
              owner: "628d0f7e8d9f8d8d8d8d8d8"
